# coding: utf-8

"""
    Wealthport API

    Wealthport provides a simple, lightweight and open Web API based on the Open API 2.0 standard (<a href=\"https://www.openapis.org\" target=\"_blank\">https://www.openapis.org</a>). Our APIs offer a variety of operations related to managing Sources, Folders, Orders and Recipes. There are operations to submit and track Jobs, upload and download data files and many more.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrderRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, sources=None, folders=None, recipe=None):
        """
        OrderRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'sources': 'list[str]',
            'folders': 'list[str]',
            'recipe': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'sources': 'sources',
            'folders': 'folders',
            'recipe': 'recipe'
        }

        self._name = name
        self._sources = sources
        self._folders = folders
        self._recipe = recipe

    @property
    def name(self):
        """
        Gets the name of this OrderRequest.
        Name of the order

        :return: The name of this OrderRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrderRequest.
        Name of the order

        :param name: The name of this OrderRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def sources(self):
        """
        Gets the sources of this OrderRequest.
        Array of source IDs to be referenced by the order

        :return: The sources of this OrderRequest.
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """
        Sets the sources of this OrderRequest.
        Array of source IDs to be referenced by the order

        :param sources: The sources of this OrderRequest.
        :type: list[str]
        """

        self._sources = sources

    @property
    def folders(self):
        """
        Gets the folders of this OrderRequest.
        Array of folder IDs to be referenced by the order

        :return: The folders of this OrderRequest.
        :rtype: list[str]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """
        Sets the folders of this OrderRequest.
        Array of folder IDs to be referenced by the order

        :param folders: The folders of this OrderRequest.
        :type: list[str]
        """

        self._folders = folders

    @property
    def recipe(self):
        """
        Gets the recipe of this OrderRequest.
        Recipe to use when processing the order

        :return: The recipe of this OrderRequest.
        :rtype: str
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe):
        """
        Sets the recipe of this OrderRequest.
        Recipe to use when processing the order

        :param recipe: The recipe of this OrderRequest.
        :type: str
        """
        if recipe is not None and len(recipe) > 36:
            raise ValueError("Invalid value for `recipe`, length must be less than or equal to `36`")
        if recipe is not None and len(recipe) < 36:
            raise ValueError("Invalid value for `recipe`, length must be greater than or equal to `36`")

        self._recipe = recipe

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
