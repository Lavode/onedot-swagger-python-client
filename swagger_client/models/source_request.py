# coding: utf-8

"""
    Wealthport API

    Wealthport provides a simple, lightweight and open Web API based on the Open API 2.0 standard (<a href=\"https://www.openapis.org\" target=\"_blank\">https://www.openapis.org</a>). Our APIs offer a variety of operations related to managing Sources, Folders, Orders and Recipes. There are operations to submit and track Jobs, upload and download data files and many more.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SourceRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, folder=None, mime=None, encoding=None):
        """
        SourceRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'folder': 'str',
            'mime': 'str',
            'encoding': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'folder': 'folder',
            'mime': 'mime',
            'encoding': 'encoding'
        }

        self._name = name
        self._folder = folder
        self._mime = mime
        self._encoding = encoding

    @property
    def name(self):
        """
        Gets the name of this SourceRequest.
        Name of the source

        :return: The name of this SourceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SourceRequest.
        Name of the source

        :param name: The name of this SourceRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def folder(self):
        """
        Gets the folder of this SourceRequest.
        Folder ID of the folder containing the source

        :return: The folder of this SourceRequest.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """
        Sets the folder of this SourceRequest.
        Folder ID of the folder containing the source

        :param folder: The folder of this SourceRequest.
        :type: str
        """
        if folder is not None and len(folder) > 36:
            raise ValueError("Invalid value for `folder`, length must be less than or equal to `36`")
        if folder is not None and len(folder) < 36:
            raise ValueError("Invalid value for `folder`, length must be greater than or equal to `36`")

        self._folder = folder

    @property
    def mime(self):
        """
        Gets the mime of this SourceRequest.
        MIME type of the source

        :return: The mime of this SourceRequest.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """
        Sets the mime of this SourceRequest.
        MIME type of the source

        :param mime: The mime of this SourceRequest.
        :type: str
        """
        allowed_values = ["text/csv", "text/tab-separated-values", "text/x-bar-separated-values", "text/x-semicolon-separated-values", "application/x-ldjson", "application/xml", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]
        if mime not in allowed_values:
            raise ValueError(
                "Invalid value for `mime` ({0}), must be one of {1}"
                .format(mime, allowed_values)
            )

        self._mime = mime

    @property
    def encoding(self):
        """
        Gets the encoding of this SourceRequest.
        Encoding of the source

        :return: The encoding of this SourceRequest.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """
        Sets the encoding of this SourceRequest.
        Encoding of the source

        :param encoding: The encoding of this SourceRequest.
        :type: str
        """
        if encoding is not None and len(encoding) > 2147483647:
            raise ValueError("Invalid value for `encoding`, length must be less than or equal to `2147483647`")
        if encoding is not None and len(encoding) < 1:
            raise ValueError("Invalid value for `encoding`, length must be greater than or equal to `1`")

        self._encoding = encoding

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SourceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
